"""
Generate visualization of data set, generated by direct of parallel algorithms. 
"""
import sys
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib import cm
from matplotlib.animation import FuncAnimation

def make_3dplot(u_time, u_x, u_val):
    """
    Generate 3D plot using file's data. 
    """
    fig = plt.figure(figsize=[10/2, 9/2], dpi=100)
    plt.tight_layout()
    ax = plt.axes(projection ='3d')
    u_x, u_time = np.meshgrid(u_x, u_time)
    ax.plot_surface(u_x, u_time, np.array(u_val), cmap=cm.coolwarm)
    ax.set_title('3D representation of U(t,x)')
    ax.set_xlabel('x')
    ax.set_ylabel('t')
    ax.set_zlabel('u')
    plt.savefig('3D.jpeg')

    def animate(angle):
        """Change rotating of figure."""
        angle *= 2
        angle_norm = (angle + 180) % 360 - 180
        elev = azim = roll = 0
        if angle <= 180:
            elev = angle_norm
        elif angle <= 180*2:
            azim = angle_norm
        elif angle <= 180*3:
            roll = angle_norm
        else:
            elev = azim = roll = angle_norm
        ax.view_init(elev, azim, roll)

    gif_3d = FuncAnimation(fig,
                        func = animate,
                        frames = np.arange(0, 360 + 1, 1),
                        interval = 0.03)
    gif_3d.save("3d_rotating.gif",writer='imagemagick',fps=30)
    plt.close()

def color_fader(c1='blue', c2='red', mix=0):
    """
    Generate color gradient depending on time.
    """
    c1=np.array(mpl.colors.to_rgb(c1))
    c2=np.array(mpl.colors.to_rgb(c2))
    return mpl.colors.to_hex((1-mix)*c1 + mix*c2)

def make_2dplot(u_time, u_x, u_val):
    """
    Generate 2D plot using file's data. 
    """
    plt.figure(figsize=[16/2, 9/2], dpi=100)
    plt.title('2D representation of U(t,x)')
    for ind in range(len(u_time)):
        plt.plot(u_x, u_val[ind], color=color_fader(mix=ind/len(u_time)))
    norm = mpl.colors.Normalize(vmin=0, vmax=max(u_time))
    sm = plt.cm.ScalarMappable(cmap=cm.coolwarm, norm=norm)
    plt.colorbar(sm, pad=0.04, label="Time, s", ax=plt.gca())
    plt.savefig('2D.jpeg')
    plt.close()

if __name__ == '__main__':
    if len(sys.argv) < 2:
        RESULTS = 'direct_results.txt'
    else:
        RESULTS = sys.argv[1]
    u = []
    with open(RESULTS, 'r') as dump:
        lines = dump.readlines()
        for line in lines:
            u.append(np.fromstring(line, dtype=np.double, sep=' '))
    time = u[0]
    x = u[1]
    u = u[2:]
    make_2dplot(time, x, u)
    make_3dplot(time, x, u)
